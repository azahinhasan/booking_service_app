// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try_Prisma_Accelerate:https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id       Int     @id @default(autoincrement())
  uid      String  @unique @default(uuid())
  email    String  @unique
  phone    String  @unique
  name     String?
  password String

  status                  String?   @default("PENDING")
  userWeight              Int?      @default(2)
  isMfaEnabled            Boolean?  @default(false)
  loginAttempts           Int?      @default(0)
  isPasswordValid         Boolean?  @default(false)
  isPasswordResetRequired Boolean?  @default(true)
  lastPasswordResetDate   DateTime? @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roleId        Int
  roleInfo      Roles    @relation(fields: [roleId], references: [id])

  @@map("users")
}

model Service {
  id          Int      @id @default(autoincrement())
  name        String
  category    String
  price       Float
  description String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bookings    ServiceBooking[]
  
  @@map("services")
}

model ServiceBooking {
  id           Int            @id @default(autoincrement())
  customerName String
  phone        String?
  email        String
  status       BookingStatus  @default(PENDING)
  emailSent    Boolean?       @default(false)

  serviceId    Int
  service      Service @relation(fields: [serviceId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("service_bookings")
}


model Roles {
  id      Int     @id @default(autoincrement())
  role    Role_names 
  context String 
  Users   Users[]

  @@map("roles")
}

model ActionLog {
  id             String   @id @default(uuid())
  referenceId    Int?
  refereceType   String?
  action         String
  context        String?
  description    String?
  additionalInfo String?
  issuerId       Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

   @@map("action_logs")
}

model ErrorLogs {
  id           Int      @id @default(autoincrement())
  errorMessage String
  errorStack   String
  context      String
  createdAt    DateTime @default(now())

  @@map("error_logs")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum Role_names {  
  SUPER_ADMIN
  ADMIN
  MANAGER
  CUSTOMER
  DEVELOPER
}
